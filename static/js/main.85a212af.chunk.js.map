{"version":3,"sources":["media/icon-location.svg","IPMap.js","App.js","reportWebVitals.js","index.js"],"names":["IPMap","data","coordinates","location","lat","lng","icon","L","iconUrl","iconLocation","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","MapContainer","center","zoom","scrollWheelZoom","id","boundsOptions","paddingBottomRight","TileLayer","attribution","url","Marker","position","Popup","ip","Loading","className","App","React","useState","setData","loading","setLoading","setError","PreserveViewport","viewport","document","querySelector","updateNativeViewport","this","setAttribute","updateStaticViewport","removeAttribute","viewWidth","window","innerWidth","viewHeight","innerHeight","FetchData","type","query","fetch","process","then","response","ok","json","catch","e","console","error","formContainer","inputBox","value","handleError","finally","useEffect","onorientationchange","onSubmit","preventDefault","target","replace","test","placeholder","onFocus","pattern","title","city","stateAbv","region","postalCode","timezone","isp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85a212af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-location.7e6459d2.svg\";","import React from 'react'\nimport { MapContainer, TileLayer, Marker, Popup} from 'react-leaflet'\nimport L from 'leaflet'\nimport iconLocation from './media/icon-location.svg'\n\nconst IPMap = ({ data }) => {\n\n    /* coordinates */\n    let coordinates = [data.location.lat, data.location.lng]\n\n    /* add a custom icon for target */\n    let icon = L.icon({\n        iconUrl: iconLocation,\n        iconRetinaUrl: iconLocation,\n        iconAnchor: null,\n        popupAnchor: [0,-20],\n        iconSize: [30, 35],\n    })\n\n    return (\n        <MapContainer center={coordinates} zoom={12} scrollWheelZoom={false} id=\"map\" boundsOptions={{paddingBottomRight: [250, 0]}}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={coordinates} icon={icon} >\n                <Popup>\n                    {`${data.ip}`}\n                </Popup>\n            </Marker>\n        </MapContainer>\n    )\n}\n\nexport default IPMap","import \"./App.scss\"\nimport React from 'react'\nimport IPMap from './IPMap.js'\n\nconst Loading = () => {\n\treturn <span className=\"loading\"></span>\n}\n\nconst App = () => {\n\n\t/* return the abbreviated form for each state in the ~US~ */\n\tlet states = {\n\t    'Arizona': 'AZ',\n\t    'Alabama': 'AL',\n\t    'Alaska': 'AK',\n\t    'Arkansas': 'AR',\n\t    'California': 'CA',\n\t    'Colorado': 'CO',\n\t    'Connecticut': 'CT',\n\t    'Delaware': 'DE',\n\t    'Florida': 'FL',\n\t    'Georgia': 'GA',\n\t    'Hawaii': 'HI',\n\t    'Idaho': 'ID',\n\t    'Illinois': 'IL',\n\t    'Indiana': 'IN',\n\t    'Iowa': 'IA',\n\t    'Kansas': 'KS',\n\t    'Kentucky': 'KY',\n\t    'Louisiana': 'LA',\n\t    'Maine': 'ME',\n\t    'Maryland': 'MD',\n\t    'Massachusetts': 'MA',\n\t    'Michigan': 'MI',\n\t    'Minnesota': 'MN',\n\t    'Mississippi': 'MS',\n\t    'Missouri': 'MO',\n\t    'Montana': 'MT',\n\t    'Nebraska': 'NE',\n\t    'Nevada': 'NV',\n\t    'New Hampshire': 'NH',\n\t    'New Jersey': 'NJ',\n\t    'New Mexico': 'NM',\n\t    'New York': 'NY',\n\t    'North Carolina': 'NC',\n\t    'North Dakota': 'ND',\n\t    'Ohio': 'OH',\n\t    'Oklahoma': 'OK',\n\t    'Oregon': 'OR',\n\t    'Pennsylvania': 'PA',\n\t    'Rhode Island': 'RI',\n\t    'South Carolina': 'SC',\n\t    'South Dakota': 'SD',\n\t    'Tennessee': 'TN',\n\t    'Texas': 'TX',\n\t    'Utah': 'UT',\n\t    'Vermont': 'VT',\n\t    'Virginia': 'VA',\n\t    'Washington': 'WA',\n\t    'West Virginia': 'WV',\n\t    'Wisconsin': 'WI',\n\t    'Wyoming': 'WY',\n\t    stateAbv: function (region) {return this[region] ? this[region] : region}\n\t}\n\n\t/* get the secret hidden in process.env */\n    let IPFY_API_KEY = process.env.REACT_APP_IPFY_API_KEY\n\n\tconst [data, setData] = React.useState(null)\n\tconst [loading, setLoading] = React.useState(true)\n\t// eslint-disable-next-line\n\tconst [error, setError] = React.useState(null)\n\n\t/* because the app is based on viewport units, this stops\n\t\tthe keyboard from shrinking into remaining space */\n\tvar PreserveViewport = {\n\t\tviewport: document.querySelector(\"meta[name=viewport]\"),\n\n\t\tupdateNativeViewport() {this.viewport.setAttribute(\"content\", `width=device-width, height=device-height, initial-scale=1.0`)},\n\n\t\tupdateStaticViewport() {\n\t\t\t/* this line piggybacks just because it must happen at the same time as this function call -- \n\t\t\t\tremove error class on text input focus*/\n\t\t\tdocument.querySelector(\"form\").removeAttribute(\"class\", \"error\")\n\t\t\t\n\t\t\t/* for some reason this.viewport can't be called like the previous method. I suspect a React lifecycle method \n\t\t\tprevents calling methods within objects from the returned DOM in the way like onCLick={some.method()} while keeping the ability to use ~this~ within the method idk */\n\t\t\tlet viewport = document.querySelector(\"meta[name=viewport]\")\n\t\t\tlet viewWidth = window.innerWidth\n\t\t\tlet viewHeight = window.innerHeight\n\t\t\tviewport.setAttribute('content', `width=${viewWidth}, height=${viewHeight}, initial-scale=1.0`)\n\n\t\t}\n\t}\n\n\tconst handleInput = (e) => {\n\n\t\te.preventDefault() /* don't reload the page */\n\t\tvar query = e.target[0].value.replace(/\\s+/g, '') /* get rid of all whitespace */\n\n\t\t/* check input type through RE */\n\t\tlet ipRE = /\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b/g\n\t\tlet domainRE = /[0-9a-zA-z]+\\.{1}[a-zA-z]+/g\n\n\t\tvar type = (ipRE.test(query) | query===\"\") ? 'ipAddress' \n\t\t\t: domainRE.test(query) ? 'domain' : 'invalid' \n\n\t\tFetchData(type, query) /* fetch */\n\n\t}\n\tconst handleError = () => {\n\t\tlet formContainer = document.querySelector(\"form\")\n\t\tlet inputBox = document.querySelector(\"input[type=text]\")\n\t\t/* error class triggers form-element shake animation*/\n\t\tformContainer.setAttribute(\"class\", \"error\")\n\t\tinputBox.value = '' /* clear the textbox */\n\t\tinputBox.setAttribute(\"placeholder\", \"Enter a valid IP Address or domain\") /* change placeholder */\n\n\t}\n\n\tconst FetchData = (type, query) => {\n\n\t\tsetLoading(true) /* put DOM in a loading state */\n\n\t\tvar api_url = 'https://geo.ipify.org/api/v1?';\n\t\tfetch(`${api_url}apiKey=${IPFY_API_KEY}&${type}=${query}`) /* put everything together */\n\n\t\t\t.then((response) => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\t\n\t\t\t\t\tsetData(null) /* only dump current data when next query is valid */\n\t\t\t\t\treturn response.json()\n\t\t\t\t}\n\t\t\t\tthrow response; /* trigger error */\n\t\t\t})\n\n\t\t\t.then((data) => setData(data)) /* feed the new data to the DOM */\n\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.error('An error happened: ', e)\n\t\t\t\tsetError(e)\n\t\t\t\thandleError() /* let the user know an error occurred*/\n\t\t\t})\n\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false) /* put DOM out of loading state ;; show data */\n\t\t\t})\n\t}\n\n\n\tReact.useEffect(() => {\n\t\t/* re-calculate viewport values --\n\t\t\tthis fixes the keyboard glitch on mobile*/\n\t\twindow.onorientationchange = () => PreserveViewport.updateNativeViewport() /* bool is irrelevant ;; just keep changing so that page re-renders*/\n\t\t/*PreserveViewport.updateNativeViewport()*/\n\t\tFetchData('ipAddress', '') /* default show google's ip on load */\n\n\t// eslint-disable-next-line\n\t}, [])\n\n\treturn (\n\t\t<>\n\t\t\t<div id=\"formContainer\">\n\t\t\t\t<header>IP Address Tracker</header>\n\t\t\t\t<form onSubmit={handleInput}>\n\n\t\t\t\t\t<input type=\"text\" placeholder=\"Search for any IP address or domain\" onFocus={PreserveViewport.updateStaticViewport} pattern=\"(\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b)|(\\b(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}\\b)|([0-9a-zA-z]+\\.{1}[a-zA-z]+)\" title=\"This is not an IP or domain\"/>\n\t\t\t\t\t<input id=\"submitButton\" type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<div id=\"results\">\n\t\t\t\t<div id=\"queryContainer\">\n\t\t\t\t\t<div className=\"enclosing\">\n\t\t\t\t\t\t<h6>IP ADDRESS</h6>\n\t\t\t\t\t\t<h4>{ !loading ? data.ip : <Loading /> }</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h6>LOCATION</h6>\n\t\t\t\t\t\t<h4>{ !loading ? `${data.location.city}, ${states.stateAbv(data.location.region)} ${data.location.postalCode}` : <Loading />  }</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h6>TIMEZONE</h6>\n\t\t\t\t\t\t<h4>{ !loading ? `UTC ${data.location.timezone}` : <Loading /> }</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"enclosing\">\n\t\t\t\t\t\t<h6>ISP</h6>\n\t\t\t\t\t\t<h4>{ !loading ? data.isp : <Loading /> }</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{!loading ? <IPMap data = {data} /> : <Loading /> }\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}